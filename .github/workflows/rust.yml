name: Rust

on:
  push:
    branches: [ master ]
    paths: 
      - '**.rs'
      - '**/Cargo.toml'
  pull_request:
    types: [ opened, edited ]
    branches: [ master ]
    paths: 
      - '**.rs'
      - '**/Cargo.toml'

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust-toolchain: [stable, nightly, '1.40.0', '1.46.0']
    steps:
    - uses: actions/checkout@v2
    - name: Install ${{ matrix.rust-toolchain }} toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.rust-toolchain }}
    - if: ${{ matrix.os != 'macOS-latest' && matrix.rust-toolchain != '1.40.0' }}
      name: Run cargo test
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --all --all-features
    - if: ${{ matrix.os == 'macOS-latest' || matrix.rust-toolchain == '1.40.0' }}
      name: Run cargo test
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --all --exclude gpu-alloc-erupt

  check-targets:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
        - i686-pc-windows-gnu
        - i686-pc-windows-msvc
        - i686-unknown-linux-gnu
        - x86_64-apple-darwin
        - x86_64-pc-windows-gnu
        - x86_64-pc-windows-msvc
        - x86_64-unknown-linux-gnu
        - wasm32-unknown-unknown

    steps:
    - uses: actions/checkout@v2
    - name: Install stable toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        target: ${{ matrix.target }}
    - name: Run cargo check
      uses: actions-rs/cargo@v1
      with:
        command: check
        args: --all --all-features
